@inject ITopicsCategoriesRepository topicsCategories

<div class="navbar-menu has-background-grey-dark">
    <div class="navbar-start">
        <div class="navbar-item">
            <p class="control has-icons-left">
                <input class="input" type="text" placeholder="Wyszukiwarka" id="name" @bind-value="topicsFilterDTO.Title" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => NameKeypress(e))">
                <span class="icon is-left">
                    <i class="fas fa-search" aria-hidden="true"></i>
                </span>
            </p>
        </div>
        <div class="navbar-item">
            <button class="button is-primary is-outlined is-fullwidth" @onclick="@(() => Search())">
                Szukaj
            </button>
        </div>
        <div class="navbar-item" @onclick="@(() => Clear())">
            <button class="button is-danger is-outlined is-fullwidth">
                Wyczyść
            </button>
        </div>
        <div class="navbar-item">
            <div class="select">
                <select @bind="topicsFilterDTO.Status">
                    <option value="0">
                        --Wybierz status--
                    </option>
                    <option value="@((int)StatusEnum.Pytanie)">@StatusEnum.Pytanie</option>
                    <option value="@((int)StatusEnum.Sugestia)">@StatusEnum.Sugestia</option>
                    <option value="@((int)StatusEnum.Zweryfikowany)">@StatusEnum.Zweryfikowany</option>
                </select>
            </div>
        </div>
        <div class="navbar-item">
            <div class="select">
                <select>
                    <option>
                        --Wybierz kategorie--
                    </option>
                    @foreach (var c in unselectedCategories)
                    {
                        <option @onclick="@(() => Select(@c))">@c.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

<div class="navbar-menu has-background-grey-dark">
    <div class="navbar-start">
        <div class="navbar-item">
         <text class="has-text-white">Wybrane kategorie: </text>

            <div class="tags pl-2">
              
                    @foreach (var c in selectedCategories)
                    {
                          <span class="tag">
                             <text>@c.Name, </text>
                        </span>
                    }            
            </div>
        </div>
    </div>
</div>



@code {
    private TopicsFilterDTO topicsFilterDTO = new TopicsFilterDTO()
        {
            Title = "",
            Status = (int)StatusEnum.NaN,
            Categories = new List<int>()
        };

    private List<CategoryOfTopic> unselectedCategories = new List<CategoryOfTopic>();
    private List<CategoryOfTopic> selectedCategories = new List<CategoryOfTopic>();


    [Parameter] public EventCallback<TopicsFilterDTO> SetTopicsFilterDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetCategories();
        }
        catch
        {

        }
    }

    private async Task GetCategories()
    {
        unselectedCategories = await topicsCategories.GetAllCategories();
    }

    private void Select(CategoryOfTopic category)
    {
        if (category != null)
        {
            selectedCategories.Add(category);

            unselectedCategories.Remove(category);

            topicsFilterDTO.Categories.Add(category.Id);
        }
    }

    private async Task Search()
    {

        topicsFilterDTO.Title = FirstCharUpper(topicsFilterDTO.Title);

        await SetTopicsFilterDTO.InvokeAsync(topicsFilterDTO);
    }

    private async Task Clear()
    {
        foreach (var c in selectedCategories)
        {
            unselectedCategories.Add(c);
        }
        selectedCategories.Clear();
        topicsFilterDTO.Title = "";
        topicsFilterDTO.Status = (int)StatusEnum.NaN;
        topicsFilterDTO.Categories = new List<int>();
        await SetTopicsFilterDTO.InvokeAsync(topicsFilterDTO);
    }

    private async Task NameKeypress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private string FirstCharUpper(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            return string.Empty;
        }
        return char.ToUpper(s[0]) + s.Substring(1);
    }
}

